import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;
 
class Solution {
 
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static StringBuilder result = new StringBuilder();
    static final int[] factorials = {0, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880};
    static int totalCase, totalWeight;
 
    public static void main(String[] args) throws IOException {
        int t = Integer.parseInt(br.readLine());
        for (int testCase = 1; testCase <= t; testCase++) {
            test(testCase);
        }
 
        System.out.println(result);
        br.close();
    }
 
 
    private static void test(int testCase) throws IOException {
        result.append('#').append(testCase).append(' ');
 
        totalCase = 0; totalWeight = 0;
 
        int n = Integer.parseInt(br.readLine());
        StringTokenizer st = new StringTokenizer(br.readLine());
        int[] weights = new int[n];
        for (int i = 0; i < n; i++) {
            weights[i] = Integer.parseInt(st.nextToken());
            totalWeight += weights[i];
        }
 
        backTrack(weights, n, 0, 0, 0, 0);
 
        result.append(totalCase).append('\n');
    }
 
    private static void backTrack(int[] weights, int n, int count, int flag, int l, int r) {
        if (count == n) {
            totalCase++;
            return;
        }
 
        if (l * 2 >= totalWeight) {
            totalCase += (1 << (n - count)) * factorials[n - count];
            return;
        }
 
        for (int i = 0; i < n; i++) {
            if ((flag & 1 << i) == 0) {
                backTrack(weights, n, count + 1, flag | 1 << i, l + weights[i], r);
 
                if (l >= r + weights[i]) {
                    backTrack(weights, n, count + 1, flag | 1 << i, l, r + weights[i]);
                }
            }
        }
    }
}